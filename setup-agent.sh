#!/bin/bash

# ü§ñ Script de Setup do Agente de Desenvolvimento
# User Management Application

echo "ü§ñ Iniciando setup do Agente de Desenvolvimento..."
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pom.xml" ]; then
    echo "‚ùå Este script deve ser executado no diret√≥rio raiz do projeto (onde est√° o pom.xml)"
    exit 1
fi

echo "üìã Verificando pr√©-requisitos..."

# Verificar Java
if ! command -v java &> /dev/null; then
    echo "‚ùå Java n√£o encontrado. Instale Java 11 ou superior."
    exit 1
else
    echo "‚úÖ Java encontrado: $(java -version 2>&1 | head -n 1)"
fi

# Verificar Maven
if ! command -v mvn &> /dev/null; then
    echo "‚ùå Maven n√£o encontrado. Instale Maven 3.6 ou superior."
    exit 1
else
    echo "‚úÖ Maven encontrado: $(mvn -version | head -n 1)"
fi

# Verificar Node.js (opcional, para ferramentas de desenvolvimento)
if command -v node &> /dev/null; then
    echo "‚úÖ Node.js encontrado: $(node --version)"
    NODE_AVAILABLE=true
else
    echo "‚ö†Ô∏è  Node.js n√£o encontrado. Algumas ferramentas n√£o estar√£o dispon√≠veis."
    NODE_AVAILABLE=false
fi

# Verificar npm (opcional)
if command -v npm &> /dev/null; then
    echo "‚úÖ npm encontrado: $(npm --version)"
    NPM_AVAILABLE=true
else
    echo "‚ö†Ô∏è  npm n√£o encontrado. Git hooks n√£o ser√£o instalados."
    NPM_AVAILABLE=false
fi

# Verificar Git
if ! command -v git &> /dev/null; then
    echo "‚ùå Git n√£o encontrado. Instale Git."
    exit 1
else
    echo "‚úÖ Git encontrado: $(git --version)"
fi

# Verificar se estamos em um reposit√≥rio Git
if [ ! -d ".git" ]; then
    echo "‚ùå N√£o √© um reposit√≥rio Git. Execute 'git init' primeiro."
    exit 1
else
    echo "‚úÖ Reposit√≥rio Git detectado"
fi

echo ""
echo "üîß Configurando o ambiente..."

# Compilar o projeto para verificar se est√° funcionando
echo "üì¶ Compilando o projeto..."
mvn clean compile
if [ $? -ne 0 ]; then
    echo "‚ùå Falha na compila√ß√£o. Verifique o projeto."
    exit 1
fi
echo "‚úÖ Compila√ß√£o bem-sucedida"

# Executar testes para verificar se est√£o passando
echo "üß™ Executando testes..."
mvn test
if [ $? -ne 0 ]; then
    echo "‚ùå Testes falharam. Corrija os testes antes de continuar."
    exit 1
fi
echo "‚úÖ Todos os testes passaram"

# Instalar depend√™ncias npm se dispon√≠vel
if [ "$NPM_AVAILABLE" = true ]; then
    echo "üì¶ Instalando depend√™ncias de desenvolvimento..."
    npm install
    if [ $? -eq 0 ]; then
        echo "‚úÖ Depend√™ncias instaladas"
    else
        echo "‚ö†Ô∏è  Falha na instala√ß√£o das depend√™ncias npm"
    fi
    
    # Instalar Husky git hooks
    echo "ü™ù Configurando git hooks..."
    npm run prepare
    if [ $? -eq 0 ]; then
        echo "‚úÖ Git hooks configurados"
    else
        echo "‚ö†Ô∏è  Falha na configura√ß√£o dos git hooks"
    fi
else
    echo "‚ö†Ô∏è  Pulando instala√ß√£o de depend√™ncias npm (Node.js n√£o dispon√≠vel)"
fi

# Tornar scripts execut√°veis
echo "üîß Configurando permiss√µes..."
if [ -d ".husky" ]; then
    chmod +x .husky/*
    echo "‚úÖ Permiss√µes dos git hooks configuradas"
fi

# Verificar configura√ß√µes de qualidade
echo "üîç Verificando ferramentas de qualidade..."

# Checkstyle
mvn checkstyle:check > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "‚úÖ Checkstyle configurado e funcionando"
else
    echo "‚ö†Ô∏è  Checkstyle encontrou problemas (isso √© normal em um projeto novo)"
fi

# SpotBugs
mvn spotbugs:check > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "‚úÖ SpotBugs configurado e funcionando"
else
    echo "‚ö†Ô∏è  SpotBugs encontrou problemas (isso √© normal em um projeto novo)"
fi

# PMD
mvn pmd:check > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "‚úÖ PMD configurado e funcionando"
else
    echo "‚ö†Ô∏è  PMD encontrou problemas (isso √© normal em um projeto novo)"
fi

# JaCoCo
mvn jacoco:report > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "‚úÖ JaCoCo configurado e funcionando"
else
    echo "‚ö†Ô∏è  JaCoCo encontrou problemas"
fi

echo ""
echo "üìã Resumo da configura√ß√£o:"
echo ""
echo "‚úÖ Arquivos de configura√ß√£o criados:"
echo "   üìö DEVELOPMENT_STANDARDS.md"
echo "   üìö GIT_WORKFLOW.md"
echo "   üìö AGENT_INSTRUCTIONS.md"
echo "   üìö AGENT_SUMMARY.md"
echo "   üîß .cursorrules"
echo "   üîç checkstyle.xml"
echo "   üîç sonar-project.properties"
echo "   üöÄ .github/workflows/ci-cd.yml"
echo "   ü™ù .husky/ (git hooks)"
echo "   üé® .editorconfig, .prettierrc, .eslintrc.json"
echo "   üì¶ package.json, commitlint.config.js"
echo "   üîÑ renovate.json, .releaserc"
echo ""
echo "‚úÖ Ferramentas configuradas:"
echo "   üîç Checkstyle - Estilo de c√≥digo"
echo "   üêõ SpotBugs - An√°lise est√°tica"
echo "   üìä PMD - Detec√ß√£o de problemas"
echo "   üìà JaCoCo - Cobertura de testes"
echo "   ü™ù Husky - Git hooks"
echo "   üé® Prettier - Formata√ß√£o"
echo "   üîç ESLint - Linting"
echo ""

if [ "$NPM_AVAILABLE" = true ]; then
    echo "‚úÖ Git hooks ativos:"
    echo "   üìù pre-commit - Valida c√≥digo antes do commit"
    echo "   üìù commit-msg - Valida formato da mensagem"
    echo "   üöÄ pre-push - Executa testes antes do push"
    echo ""
fi

echo "üéØ Pr√≥ximos passos:"
echo ""
echo "1. üìö Leia a documenta√ß√£o:"
echo "   - DEVELOPMENT_STANDARDS.md"
echo "   - GIT_WORKFLOW.md"
echo "   - AGENT_INSTRUCTIONS.md"
echo ""
echo "2. üß™ Teste o fluxo de desenvolvimento:"
echo "   git checkout -b feature/test-agent"
echo "   echo '// Teste' >> src/main/java/com/example/usermanagement/UserManagementApplication.java"
echo "   git add ."
echo "   git commit -m \"feat(test): testar agente de desenvolvimento\""
echo ""
echo "3. üöÄ Execute verifica√ß√µes de qualidade:"
echo "   mvn checkstyle:check spotbugs:check pmd:check"
echo "   mvn test jacoco:report"
echo ""
echo "4. üîß Customize conforme necess√°rio:"
echo "   - Ajuste regras em checkstyle.xml"
echo "   - Modifique pipeline em .github/workflows/ci-cd.yml"
echo "   - Adapte padr√µes em DEVELOPMENT_STANDARDS.md"
echo ""

if [ "$NPM_AVAILABLE" = true ]; then
    echo "üìã Scripts npm dispon√≠veis:"
    echo "   npm run lint         - Executar ESLint"
    echo "   npm run format       - Formatar c√≥digo com Prettier"
    echo "   npm run quality:check - Verificar qualidade Maven"
    echo "   npm run test         - Executar testes Maven"
    echo "   npm run docker:build - Build Docker"
    echo ""
fi

echo "üéâ Setup do Agente de Desenvolvimento conclu√≠do com sucesso!"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "   - Todos os desenvolvedores devem ler a documenta√ß√£o"
echo "   - Padr√µes s√£o obrigat√≥rios, n√£o opcionais"
echo "   - Pipeline deve sempre passar antes do merge"
echo "   - Em caso de d√∫vidas, consulte AGENT_INSTRUCTIONS.md"
echo ""
echo "ü§ñ Agente de Desenvolvimento ativo e operacional!"
