name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MAVEN_OPTS: -Xmx1024m
  JAVA_VERSION: '11'

jobs:
  # Job de qualidade de código e testes
  quality-and-tests:
    name: 🔍 Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'adopt'
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: 🔧 Validate Maven configuration
      run: mvn validate
    
    - name: 🧹 Clean and compile
      run: mvn clean compile
    
    - name: 🔍 Run Checkstyle
      run: mvn checkstyle:check
      continue-on-error: true
    
    - name: 🐛 Run SpotBugs
      run: mvn spotbugs:check
      continue-on-error: true
    
    - name: 📊 Run PMD
      run: mvn pmd:check
      continue-on-error: true
    
    - name: 🧪 Run tests
      run: mvn test
    
    - name: 📈 Generate JaCoCo coverage report
      run: mvn jacoco:report
    
    - name: 📊 Check coverage threshold
      run: mvn jacoco:check
    
    - name: 📤 Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          target/checkstyle-results.xml
          target/spotbugsXml.xml
          target/pmd.xml

  # Job de build e package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: quality-and-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'adopt'
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: 🏗️ Build application
      run: mvn clean package -DskipTests
    
    - name: 📤 Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: user-management-app
        path: target/user-management-app-*.jar

  # Job de análise de segurança
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-and-tests
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'adopt'
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: 🔍 Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true
    
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html

  # Job de Docker build
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 📥 Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: user-management-app
        path: target/
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: user-management-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy (apenas para main)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        echo "Image: user-management-app:main"
        # Aqui você adicionaria os comandos específicos de deploy
        # Por exemplo: kubectl, docker-compose, etc.

  # Job de notificação
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [quality-and-tests, build, security, docker]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: ${{ needs.quality-and-tests.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ Pipeline executado com sucesso!"
        echo "🔍 Quality & Tests: ${{ needs.quality-and-tests.result }}"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "🐳 Docker: ${{ needs.docker.result }}"
    
    - name: 📢 Notify failure
      if: ${{ needs.quality-and-tests.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline falhou!"
        echo "🔍 Quality & Tests: ${{ needs.quality-and-tests.result }}"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "🐳 Docker: ${{ needs.docker.result }}"
        exit 1

